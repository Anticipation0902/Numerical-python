#Euler method
def KATTA_1(u, t, step_t, N):
    x = []
    for i in range(N):
        u += step_t*f(u,t)
        t += step_t
        
        x.append(u)
        
    return x

#Runge-Kutta 3 method
def KATTA_3(u, t, step_t, N):
    x = []
    for i in range(N):
        K1 = step_t*f(u, t)
        K2 = step_t*f(u+(1/2)*K1, t+(1/2)*step_t)
        K3 = step_t*f(u-K1+2*K2, t+step_t)
        
        u += (1/6)*(K1+4*K2+K3)
        t += step_t
        
        x.append(u)
        
    return x


#Runge-Kutta 4 method
def KATTA_4(u, t, step_t, N):
    x = []
    for i in range(N):
        K1 = step_t*f(u, t)
        K2 = step_t*f(u+(1/2)*K1, t+(1/2)*step_t)
        K3 = step_t*f(u+(1/2)*K2, t+(1/2)*step_t)
        K4 = step_t*f(u+K3, t+step_t)
        
        u += (1/6)*(K1+2*K2+2*K3+K4)
        t += step_t
        
        x.append(u)
    
    return x
    
#ODE to solve using Runge-Kutta scheme
def f(u,t):
    return 2*u;
