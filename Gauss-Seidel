#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Apr 11 19:29:42 2021

"""

import numpy as np
from scipy.linalg import solve_triangular as triSolve

#O(n) per iteration, so overall O(nN), good for large SPD/SDD matrices
def GS_iter(A, b, N):
    m = len(A)
    L = np.tril(A)
    P = L-A
    
    x = np.zeros(m)
    for k in range(N):
        x = triSolve(L,(P@x)+b, lower = True)
        
    return x
        


#examples
A = np.array([[10,2,3,1.1],
              [1,10,0,1.1],
              [0.2,1,10,2],
              [0.1,3,3,10]])
b = np.array([1,2,1,0.2])

RANDM = np.random.rand(5000,5000)+1000*np.identity(5000)
RANDV = np.random.rand(5000)*10

x = GS_iter(A,b,100)
y = GS_iter(RANDM,RANDV,20)

print(np.linalg.norm(A@x-b), np.linalg.norm(RANDM@y-RANDV))
